version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stack-name:
        description: frontend stack name
        type: string
        default: udapeople-frontend-${CIRCLE_WORKFLOW_ID}
      backend-stack-name:
        description: frontend stack name
        type: string
        default: udapeople-backend-${CIRCLE_WORKFLOW_ID}
      bucket-name:
        description: frontend S3 bucket name
        type: string
        default: udapeople-"${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.bucket-name >> --recursive
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      memstash-token:
        description: Memstash token for migration result
        type: string
        default: "token:migration_${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            MIGRATION_OUTPUT=$(curl -H "Content-Type: text/plain" -H << parameters.memstash-token >> --request GET https://api.memstash.io/values/migrations)
            echo "Migration Output: $MIGRATION_OUTPUT"
            if [ "$MIGRATION_OUTPUT" == "success" ]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-2]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-2

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-2

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-2]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-2]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical || true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["07:08:2f:2a:e9:36:4b:c7:c6:92:e9:7f:8e:f1:bf:f2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk -Uuv add groff less python py-pip
            pip install awscli
      - run:
          name: Configure server
          command: |
            ls -la ~/
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Run migrations and send results to memstash
          command: |
            cd backend
            npm run migrations > migrations.txt
            echo "------------------------------------------------------------------"
            cat migrations.txt
            echo "------------------------------------------------------------------"
            if [[ $(cat migrations.txt) =~ "has been executed successfully" ]]
            then
              echo "PUT 'success' to MEMSTASH"
              curl -H "Content-Type: text/plain" -H "token:migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "success" https://api.memstash.io/values/migrations
            else
              echo "PUT 'fail' to MEMSTASH"
              curl -H "Content-Type: text/plain" -H "token:migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "fail" https://api.memstash.io/values/migrations
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # Add frontend-build-2 and remove the install+build steps below
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            API_URL="http://${BACKEND_IP}:3030/api/status"
            curl -H "Content-Type: text/plain" -H "token:api_url_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$API_URL" https://api.memstash.io/values/api_url
            echo "API_URL: ${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --delete
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      # FIXME: is node image enough?
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["07:08:2f:2a:e9:36:4b:c7:c6:92:e9:7f:8e:f1:bf:f2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl
            apk -Uuv add groff less python py-pip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf backend_artifact.tar.gz .
            echo "------------------------------------------------------------------"
            echo "pwd: $(pwd)"
            echo "------------------------------------------------------------------"
            ls -la
            echo "--- ~/project ----------------------------------------------------"
            ls -la ~/project
            echo "--- ~/project/backend --------------------------------------------"
            ls -la ~/project/backend
            echo "------------------------------------------------------------------"
            find . -name "backend_artifact.tar.gz"
            echo "------------------------------------------------------------------"
            mv backend_artifact.tar.gz .circleci/ansible/roles/deploy/files
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-2]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo "Frontend URL: $URL"
            curl -s ${URL} > curl_frontend_out.txt
            if [[ $(cat curl_frontend_out.txt) =~ "Welcome" ]]
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Get backend url and run smoke test
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token:api_url_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/api_url)
            echo "Backend API_URL: $API_URL"
            curl -s $API_URL > curl_backend_out.txt
            echo "----------------------------------------------------"
            cat curl_backend_out.txt
            echo "--- sleep 600 --------------------------------------"
            sleep 600
            if curl -s $API_URL > curl_backend_out.txt
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch, main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]