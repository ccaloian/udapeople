version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend-stack-name:
        description: frontend stack name
        type: string
        default: udapeople-frontend-${CIRCLE_WORKFLOW_ID}
      backend-stack-name:
        description: frontend stack name
        type: string
        default: udapeople-backend-${CIRCLE_WORKFLOW_ID}
      bucket-name:
        description: frontend S3 bucket name
        type: string
        default: udapeople-"${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://<< parameters.bucket-name >> --recursive
            aws cloudformation delete-stack --stack-name << parameters.frontend-stack-name >>
            aws cloudformation delete-stack --stack-name << parameters.backend-stack-name >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      memstash-token:
        description: Memstash token for migration result
        type: string
        default: "token:migration_${CIRCLE_WORKFLOW_ID}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            MIGRATION_OUTPUT=$(curl -H "Content-Type: text/plain" -H << parameters.memstash-token >> --request GET https://api.memstash.io/values/migrations)
            echo "Migration Output: $MIGRATION_OUTPUT"
            if [ "$MIGRATION_OUTPUT" == "success" ]
            then
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            fi
         
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-4

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-4]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-4

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-4]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-4]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-4]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical || true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["07:08:2f:2a:e9:36:4b:c7:c6:92:e9:7f:8e:f1:bf:f2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk -Uuv add groff less python py-pip
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-4]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Run migrations and send results to memstash
          command: |
            cd backend
            npm run migrations > migrations.txt
            echo "------------------------------------------------------------------"
            cat migrations.txt
            echo "------------------------------------------------------------------"
            if [[ $(cat migrations.txt) =~ "has been executed successfully" ]]
            then
              echo "PUT 'success' to MEMSTASH"
              curl -H "Content-Type: text/plain" -H "token:migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "success" https://api.memstash.io/values/migrations
            else
              echo "PUT 'fail' to MEMSTASH"
              curl -H "Content-Type: text/plain" -H "token:migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "fail" https://api.memstash.io/values/migrations
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      # - restore_cache:
      #     keys: [frontend-build-4]
      - attach_workspace:
          at: /~
      - run:
          name: Get backend url and deploy frontend objects
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            curl -H "Content-Type: text/plain" -H "token:api_url_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$API_URL" https://api.memstash.io/values/api_url
            echo "--- API_URL --------------------------------------"
            echo "API_URL: ${API_URL}"
            echo "--------------------------------------------------"
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token:api_url_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/api_url)
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URIL=$API_URL >> "frontend/.env"
            echo "--- frontend/.env --------------------------------"
            cat frontend/.env
            echo "--------------------------------------------------"
            cd frontend
            npm install
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --delete
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["07:08:2f:2a:e9:36:4b:c7:c6:92:e9:7f:8e:f1:bf:f2"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip nodejs npm curl
            apk -Uuv add groff less python py-pip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            echo "--- add env vars --------------------------------------------------"
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo "------------------------------------------------------------------"
            cat backend/.env
            echo "------------------------------------------------------------------"
            tar -C backend -czvf backend_artifact.tar.gz .
            echo "------------------------------------------------------------------"
            mv backend_artifact.tar.gz .circleci/ansible/roles/deploy/files
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-4]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com"
            echo "--- Frontend URL -----------------------------------"
            echo "Frontend URL: $URL"
            echo "----------------------------------------------------"
            curl -s ${URL} > curl_frontend_out.txt
            echo "--- cat curl_frontend_out.txt ----------------------"
            cat curl_frontend_out.txt
            echo "----------------------------------------------------"
            if [[ $(cat curl_frontend_out.txt) =~ "Welcome" ]]
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Get backend url and run smoke test
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token:api_url_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/api_url)
            export STATUS_URL="${API_URL}/api/status"
            echo "--- Backend URL ------------------------------------"
            echo "Backend STATUS_URL: $STATUS_URL"
            echo "----------------------------------------------------"
            curl -s $STATUS_URL > curl_backend_out.txt
            echo "--- cat curl_backend_out.txt -----------------------"
            cat curl_backend_out.txt
            echo "----------------------------------------------------"
            if [[ $(cat curl_backend_out.txt) =~ '"status":"ok"' ]]
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get old WorkflowId (Blue Deployment) and write to Memstash
          command: |
            OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token:workflow_id_${CIRCLE_WORKFLOW_ID}" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/workflow_id
      - run:
          name: Update cloudfront distribution
          command: |
            OldWorkflowID=$(curl -H "Content-Type: text/plain" -H "token:workflow_id_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/workflow_id)
            # aws cloudformation deploy \
            #   --template-file .circleci/files/cloudfront.yml \
            #   --tags project=udapeople
            #   --stack-name udapeople-cloudfront-${CIRCLE_WORKFLOW_ID} \
            #   --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name udapeople-cloudfront-${OldWorkflowID} \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID},UsePreviousValue=false
      - destroy-environment
      - revert-migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID=$(curl -H "Content-Type: text/plain" -H "token:workflow_id_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/workflow_id)
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: 
                - main
                - /pre-prod(?:-.+)?$/
      # - cleanup:
      #     requires: [cloudfront-update]